#!/usr/bin/env node

/**
 * üöÄ TEST AUTOMATIS√â PAIEMENT PACK COMPLET GHOST
 * 
 * Ce script teste le paiement du Pack Complet Ghost (45‚Ç¨)
 * et v√©rifie la r√©ception de l'email de confirmation
 */

import nodemailer from 'nodemailer';
import fetch from 'node-fetch';

const CONFIG = {
  // Configuration du test
  TEST_EMAIL: 'contact@ghostremixpack.com',
  TEST_NAME: 'Test Automatis√© Ghost',
  BACKEND_URL: process.env.VITE_BACKEND_URL || 'https://ghost-remix-backend.up.railway.app',
  
  // Pack Complet √† tester
  PACK_COMPLET: {
    id: 'pack-complet',
    name: 'Pack Complet Ghost',
    price: 45,
    originalPrice: 53
  },

  // Configuration Zimbra OVH pour v√©rification email
  ZIMBRA_CONFIG: {
    host: process.env.SMTP_HOST || 'ssl0.ovh.net',
    port: process.env.SMTP_PORT || 587,
    user: process.env.SENDGRID_FROM_EMAIL || 'contact@ghostremixpack.com',
    pass: process.env.EMAIL_PASSWORD
  }
};

console.log(`
üéØ TEST PAIEMENT PACK COMPLET GHOST
==================================

Configuration:
‚Ä¢ Email test: ${CONFIG.TEST_EMAIL}
‚Ä¢ Backend: ${CONFIG.BACKEND_URL}
‚Ä¢ Pack: ${CONFIG.PACK_COMPLET.name} (${CONFIG.PACK_COMPLET.price}‚Ç¨)
‚Ä¢ Email Zimbra: ${CONFIG.ZIMBRA_CONFIG.user}

`);

async function testBackendHealth() {
  console.log('üîç 1. Test de sant√© du backend...');
  
  try {
    const response = await fetch(`${CONFIG.BACKEND_URL}/api/health`);
    const data = await response.json();
    
    if (data.status === 'OK') {
      console.log('‚úÖ Backend accessible et op√©rationnel');
      console.log(`   Service: ${data.service}`);
      console.log(`   Version: ${data.version || 'N/A'}`);
      return true;
    } else {
      console.log('‚ùå Backend non op√©rationnel');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur connexion backend:', error.message);
    return false;
  }
}

async function testProductsAPI() {
  console.log('üîç 2. Test API des produits...');
  
  try {
    const response = await fetch(`${CONFIG.BACKEND_URL}/api/payment/products`);
    const data = await response.json();
    
    if (data.success && data.products) {
      console.log('‚úÖ API produits fonctionnelle');
      console.log(`   Produits disponibles: ${data.count}`);
      
      // V√©rifier que le Pack Complet existe
      const packComplet = data.products.find(p => p.id === CONFIG.PACK_COMPLET.id);
      if (packComplet) {
        console.log('‚úÖ Pack Complet Ghost trouv√©');
        console.log(`   Prix: ${packComplet.price}‚Ç¨`);
        return true;
      } else {
        console.log('‚ùå Pack Complet Ghost non trouv√© dans l\'API');
        return false;
      }
    } else {
      console.log('‚ùå API produits non fonctionnelle');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur API produits:', error.message);
    return false;
  }
}

async function testCheckoutSessionCreation() {
  console.log('üîç 3. Test cr√©ation session Stripe...');
  
  try {
    const response = await fetch(`${CONFIG.BACKEND_URL}/api/payment/create-checkout-session`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        productId: CONFIG.PACK_COMPLET.id,
        quantity: 1,
        customerInfo: {
          email: CONFIG.TEST_EMAIL,
          name: CONFIG.TEST_NAME,
        },
        successUrl: 'https://www.ghostremixpack.com/success-stripe?session_id={CHECKOUT_SESSION_ID}',
        cancelUrl: 'https://www.ghostremixpack.com/test-paiement-complet',
      }),
    });

    const data = await response.json();
    
    if (data.success && data.url) {
      console.log('‚úÖ Session Stripe cr√©√©e avec succ√®s');
      console.log(`   URL de paiement: ${data.url}`);
      console.log(`   Session ID: ${data.sessionId}`);
      
      // V√©rifier que l'URL contient bien "checkout.stripe.com"
      if (data.url.includes('checkout.stripe.com')) {
        console.log('‚úÖ URL Stripe Checkout valide');
        return data;
      } else {
        console.log('‚ùå URL Stripe Checkout invalide');
        return false;
      }
    } else {
      console.log('‚ùå √âchec cr√©ation session Stripe');
      console.log(`   Erreur: ${data.error || 'Inconnue'}`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur cr√©ation session:', error.message);
    return false;
  }
}

async function testEmailConfiguration() {
  console.log('üîç 4. Test configuration email Zimbra...');
  
  try {
    const transporter = nodemailer.createTransporter({
      host: CONFIG.ZIMBRA_CONFIG.host,
      port: CONFIG.ZIMBRA_CONFIG.port,
      secure: false,
      auth: {
        user: CONFIG.ZIMBRA_CONFIG.user,
        pass: CONFIG.ZIMBRA_CONFIG.pass
      },
      tls: {
        ciphers: 'SSLv3'
      }
    });

    await transporter.verify();
    console.log('‚úÖ Configuration email Zimbra OVH fonctionnelle');
    
    // Test d'envoi d'email de test
    const testEmailContent = {
      from: `"üëª Ghost Test" <${CONFIG.ZIMBRA_CONFIG.user}>`,
      to: CONFIG.TEST_EMAIL,
      subject: 'üß™ Test Email Syst√®me Paiement Ghost',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #0B0B0F; color: #F5F5F7; padding: 25px; border-radius: 15px;">
          <div style="text-align: center; background: linear-gradient(135deg, #9B5CF6, #00E5FF); padding: 20px; border-radius: 15px; margin-bottom: 20px;">
            <h1 style="color: white; margin: 0;">üëª TEST SYST√àME PAIEMENT</h1>
            <p style="color: white; margin: 10px 0;">Configuration email fonctionnelle !</p>
          </div>
          
          <div style="padding: 20px;">
            <h2 style="color: #00E5FF;">Test Configuration Email R√©ussi ‚úÖ</h2>
            <p>Ce test confirme que le syst√®me d'email automatique fonctionne correctement.</p>
            
            <div style="background: rgba(155, 92, 246, 0.2); padding: 15px; border-radius: 10px; margin: 15px 0;">
              <h3 style="color: #9B5CF6; margin: 0;">D√©tails du test :</h3>
              <ul style="color: #F5F5F7; margin: 10px 0;">
                <li>Date : ${new Date().toLocaleString('fr-FR')}</li>
                <li>Serveur : ${CONFIG.ZIMBRA_CONFIG.host}</li>
                <li>Email test : ${CONFIG.TEST_EMAIL}</li>
                <li>Pack test√© : ${CONFIG.PACK_COMPLET.name} (${CONFIG.PACK_COMPLET.price}‚Ç¨)</li>
              </ul>
            </div>
            
            <p style="color: #B0B0C0; font-size: 14px;">
              Pr√™t pour le test de paiement complet !
            </p>
          </div>
        </div>
      `,
      text: `
üëª TEST SYST√àME PAIEMENT GHOST

Configuration email fonctionnelle !

Date : ${new Date().toLocaleString('fr-FR')}
Serveur : ${CONFIG.ZIMBRA_CONFIG.host}
Email test : ${CONFIG.TEST_EMAIL}
Pack test√© : ${CONFIG.PACK_COMPLET.name} (${CONFIG.PACK_COMPLET.price}‚Ç¨)

Pr√™t pour le test de paiement complet !
      `
    };

    await transporter.sendMail(testEmailContent);
    console.log('‚úÖ Email de test envoy√© avec succ√®s');
    console.log(`   V√©rifiez votre bo√Æte mail: ${CONFIG.TEST_EMAIL}`);
    
    return true;
  } catch (error) {
    console.log('‚ùå Erreur configuration email:', error.message);
    return false;
  }
}

async function runFullTest() {
  console.log('üöÄ D√âMARRAGE DU TEST COMPLET\n');
  
  const results = {
    backend: await testBackendHealth(),
    products: false,
    checkout: false,
    email: false
  };

  if (results.backend) {
    results.products = await testProductsAPI();
  }

  if (results.products) {
    results.checkout = await testCheckoutSessionCreation();
  }

  if (CONFIG.ZIMBRA_CONFIG.pass) {
    results.email = await testEmailConfiguration();
  } else {
    console.log('‚ö†Ô∏è  Configuration email manquante (EMAIL_PASSWORD)');
  }

  // R√©sultats finaux
  console.log(`
üìä R√âSULTATS DU TEST
===================

‚úÖ Backend Health: ${results.backend ? 'OK' : '√âCHEC'}
‚úÖ API Produits: ${results.products ? 'OK' : '√âCHEC'}  
‚úÖ Session Stripe: ${results.checkout ? 'OK' : '√âCHEC'}
‚úÖ Email Zimbra: ${results.email ? 'OK' : results.email === false ? '√âCHEC' : 'NON TEST√â'}

`);

  if (results.backend && results.products && results.checkout) {
    console.log(`
üéâ TEST R√âUSSI ! LE SYST√àME EST PR√äT !

üìã PROCHAINES √âTAPES POUR TEST MANUEL :

1. üåê Ouvrir : https://www.ghostremixpack.com/test-paiement-complet

2. üí≥ Utiliser carte de test Stripe :
   ‚Ä¢ Num√©ro : 4242 4242 4242 4242
   ‚Ä¢ Date : 12/34
   ‚Ä¢ CVC : 123

3. üìß V√©rifier email de confirmation sur :
   ‚Ä¢ ${CONFIG.TEST_EMAIL}
   ‚Ä¢ Zimbra OVH : https://mail.ovh.net/

4. ‚úÖ Confirmer r√©ception email avec :
   ‚Ä¢ Sujet : "üéâ Paiement confirm√© - Pack Complet Ghost (45‚Ç¨)"
   ‚Ä¢ Liens de t√©l√©chargement
   ‚Ä¢ Design Ghost professionnel

üöÄ Le syst√®me de paiement Pack Complet est op√©rationnel !
`);
  } else {
    console.log(`
‚ùå TEST √âCHOU√â ! V√âRIFIEZ LA CONFIGURATION

Erreurs d√©tect√©es :
${!results.backend ? '‚Ä¢ Backend inaccessible\n' : ''}${!results.products ? '‚Ä¢ API produits d√©faillante\n' : ''}${!results.checkout ? '‚Ä¢ Cr√©ation session Stripe √©chou√©e\n' : ''}${!results.email ? '‚Ä¢ Configuration email √† v√©rifier\n' : ''}
Consultez les logs ci-dessus pour plus de d√©tails.
`);
  }
}

// Ex√©cuter le test
runFullTest().catch(console.error);

